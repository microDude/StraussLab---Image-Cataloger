<?xml version="1.0"?>
<project name="Use project.name" default="build-release" xmlns:ivy="antlib:org.apache.ivy.ant">

    <!-- Includes -->
    <xmlproperty file="build.properties.xml" collapseAttributes="true"/>
	
	<!-- Derived Variables -->
	<property name="project.jar.filename" value="${project.name}.jar"/>
	<property name="project.javadoc.filename" value="${project.name}-doc.zip"/>
    <property name="project.zip.filename" value="${project.name}-${project.dist.version}.zip"/>
	
	<!-- Derived Directories -->
    <property name="project.src.dir" location="${basedir}/src/java"/>
    <property name="project.src.test.dir" location="${basedir}/src/test"/>
    <property name="project.dist.dir" location="${basedir}/dist"/>
    <property name="project.bin.dir" location="${basedir}/bin"/>
    <property name="project.cfg.dir" location="${basedir}/cfg"/>
    <property name="project.res.dir" location="${basedir}/res"/>
    <property name="project.lib.dir" location="${basedir}/lib"/>
	<property name="project.lib.customer.dir" location="${project.lib.dir}/customer"/>
	<property name="project.dist.classes.dir" location="${project.dist.dir}/classes"/>
	<property name="project.dist.javadoc.dir" location="${project.dist.dir}/javadoc"/>
	<property name="project.dist.version.dir" value="${project.dist.dir}/${project.dist.version}-${project.name}"/>
 
    <property environment="env" />
    <property name="java.boot.classpath" value="${env.JAVA_HOME}" />

	<!-- Class Path for all Library Dependencies -->
    <path id="project.class.path">
        <fileset dir="${project.lib.dir}">
            <include name="**/*.jar"/>
            <include name="**/*.zip"/>
        </fileset>
    </path>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="project.class.path"/>

    <!-- The default entry point -->
    <target name="build-release" description="default: Make everything"
            depends="resolve, prepare-dist, build-components, copy-dist, zip-dist"/>

	<!-- Apache IVY -->
	<target name="resolve" description="--> retreive dependencies with ivy">
		<!-- <ivy:resolve type="jar"/> -->
		<ivy:retrieve conf="test" pattern="lib/[conf]/[artifact](-[classifier]).[ext]"/>
		<ivy:retrieve conf="external" pattern="lib/[conf]/[artifact](-[classifier]).[ext]"/>
		<ivy:retrieve conf="util" pattern="lib/[conf]/[artifact](-[classifier]).[ext]"/>
	</target> 
			
			
    <!-- Creates needed directories etc. -->
    <target name="prepare-dist">

		<!-- Comment Out, if you just want to overwrite the current distribution -->
        <!--
		<available file="${project.dist.version.dir}" type="dir" property="dist.dir.present"/>
        <fail if="dist.dir.present" message="Release ${project.dist.version.dir} already available!"/>
		-->
		<delete dir="${project.dist.version.dir}"/>
        <mkdir dir="${project.dist.version.dir}"/>

        <delete dir="${project.dist.classes.dir}"/>
        <mkdir dir="${project.dist.classes.dir}"/>

    </target>

    <!-- Compiles and creates JAR -->
    <target name="build-components">

        <!-- todo ${project.src.test.dir} Testklassen optional fuer Simulator -->
        <javac srcdir="${project.src.dir}:${project.src.test.dir}"
               destdir="${project.dist.classes.dir}"
               debug="${project.compiler.debug}"
               optimize="${project.compiler.optimize}"
               deprecation="${project.compiler.deprecation}"
               target="${project.compiler.target}"
               source="${project.compiler.source}"
               verbose="${project.compiler.verbose}"
			   includeantruntime="false">
            <classpath refid="project.class.path"/>
            <!-- Uncomment when using Java Version 1.6 and earlier for Ant. The JAVA_HOME environment variable must be set. -->
            <bootclasspath>
                <fileset dir="${project.lib.dir}">
                    <include name="**/*.jar"/>
                    <include name="**/*.zip"/>
                </fileset>
                <fileset dir="${java.boot.classpath}">
                    <include name="**/*.jar"/>
                </fileset>
            </bootclasspath>
        </javac>

        <tstamp/>

        <jar jarfile="${project.lib.customer.dir}/${project.jar.filename}" basedir="${project.dist.classes.dir}">
            <manifest>
				<attribute name="Created-By" value="${user.name}, ${DSTAMP}-${TSTAMP}, ${os.name}-${os.arch}-${os.version}"/>
				<attribute name="Built-By" value="${user.name}"/>
                <attribute name="Specification-Title" value="${project.name}"/>
				<attribute name="Specification-Version" value="${project.dist.version}"/>
				<attribute name="Specification-Vendor" value="${project.company}"/>
				<attribute name="Implementation-Title" value="${project.name}"/>
				<attribute name="Implementation-Version" value="${project.dist.version}"/>
				<attribute name="Implementation-Vendor" value="${project.company}"/>
            </manifest>
        </jar>
		
		<if>
			<equals arg1="${project.dist.createjavdoc}" arg2="true" />
			<then>
				<mkdir dir="${project.dist.javadoc.dir}"/>
			
				<javadoc destdir="${project.dist.javadoc.dir}"
					 author="true"
					 access="private"
					 version="true"
					 use="true"
					 splitindex="true"
					 noindex="false"
					 windowtitle="${project.name} API"
					 doctitle="${project.name}"
					 bottom="Copyright &#169; ${year} ${project.company}. All Rights Reserved.">
					<classpath refid="project.class.path"/>

					<fileset dir="${project.src.dir}"/>
					<package name="**"/>
				</javadoc>
			
				<zip destfile="${project.lib.customer.dir}/${project.javadoc.filename}" basedir="${project.dist.javadoc.dir}"/>
			 
				<delete dir="${project.dist.javadoc.dir}"/>	
			</then>
		</if>

    </target>

    <!-- Copies files to be distributed -->
    <target name="copy-dist">

        <!-- cfg -->
        <copy todir="${project.dist.version.dir}/cfg" overwrite="true">
            <fileset dir="${project.cfg.dir}">
                <include name="**/*"/>
            </fileset>
        </copy>
 
        <!-- lib -->
        <copy todir="${project.dist.version.dir}/lib" overwrite="true">
            <fileset dir="${project.lib.dir}">
                <include name="customer/*.jar"/>
                <include name="external/**/*.jar"/>
                <include name="native/*.*"/>
            </fileset>
        </copy>

        <!-- res -->
        <copy todir="${project.dist.version.dir}/res" overwrite="true">
            <fileset dir="${project.res.dir}">
                <include name="**/*"/>
            </fileset>
        </copy>

    </target>
	
    <!-- creates distributable zip file -->
    <target name="zip-dist">

        <zip destfile="${project.dist.dir}/${project.zip.filename}" basedir="${project.dist.dir}"
             includes="${project.dist.version}-${project.name}/**/*"/>

    </target>
	
	
</project>